pipeline {
    agent any
    environment {
        ENV_NAME = 'dev'
        APP_NAME = 'firstspring-dev'
        APP_PORT = '9595'
        DOCKER_IMAGE = 'firstspring-app:dev-latest'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'master', url: 'https://github.com/Saket105/spring-docker-test'
            }
        }

        stage('Maven Build') {
            steps {
                bat 'mvn clean package -DskipTests'
            }
        }

        stage('Load Dev Config') {
            steps {
                script {
                    // read dev configuration
                    devConfig = readYaml file: 'ci/dev/values-dev.yml'
                    echo "Building for environment: ${devConfig.environment}"
                    echo "Server port: ${devConfig.server.port}"
                }
            }
        }

        stage('Docker Build') {
            steps {
                bat "docker build -t %DOCKER_IMAGE% ."
            }
        }

        stage('Deploy to Dev') {
            steps {
                script {
                    def port = 9595
                    bat """
                        for /f "tokens=1" %%i in ('docker ps -q --filter "publish=${port}"') do docker stop %%i
                        for /f "tokens=1" %%i in ('docker ps -a -q --filter "publish=${port}"') do docker rm %%i

                        REM Run new container
                        docker run -d -p ${port}:${port} --name firstspring-dev firstspring-app:dev-latest --server.port=${port}

                        REM Stream logs for a while
                        timeout /t 15 >nul
                        docker logs --tail 100 firstspring-dev
                    """
                }
            }
        }


        stage('Verify Dev Deployment'){
            steps{
                script{
                    def port = devConfig.server.port   // use the same loaded port
                    sleep(10)
                    bat "curl -f http://localhost:${port}/actuator/health || echo Health check failed but continuing"
                    echo "‚úÖ DEV Deployment Successful!"
                    echo "üåê Access DEV at: http://localhost:${port}"
                }
            }
        }
    }
    post{
        always{
            echo 'Dev pipeline execution completed'
        }
    }
}