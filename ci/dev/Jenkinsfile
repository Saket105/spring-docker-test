pipeline{
    agent any
    environment{
        ENV_NAME = 'dev'
        APP_NAME = 'firstspring-dev'
        APP_PORT = '9595'
        DOCKER_IMAGE = 'firstspring-app:dev-latest'
    }

    stages{
        stage('Checkout Code'){
            steps{
                git branch: 'master', url: 'https://github.com/Saket105/spring-docker-test'
            }
        }

        stage('Maven Build'){
            steps{
                bat 'mvn clean package -DskipTests'
            }
        }

        stage('Load Dev Config'){
            steps{
                script{
                    //read dev configuration
                    def config = readYaml file: 'ci/dev/values-dev.yml'
                    echo "Building for environment: ${config.environment}"
                    echo "Server port: ${config.server.port}"
                }
            }
        }
        stage('Docker Build'){
            steps{
                bat "docker build -t %DOCKER_IMAGE% ."
            }
        }
        stage('Deploy to Dev'){
            steps{
                script{
                    bat '''
                                for /f "tokens=1" %%i in ('docker ps -q --filter "publish=9595"') do docker stop %%i
                                for /f "tokens=1" %%i in ('docker ps -a -q --filter "publish=9595"') do docker rm %%i

                                REM Run new container
                                docker run -it -d -p 9595:9595 --name %APP_NAME% %DOCKER_IMAGE%
                        '''
                }
            }
        }
        stage('Verify Dev Deployment'){
            steps{
                script{
                    sleep(10)
                    bat 'curl -f http://localhost:%APP_PORT%/actuator/health || echo "Health check faild but continuing"'
                    echo "‚úÖ DEV Deployment Successful!"
                    echo "üåê Access DEV at: http://localhost:${APP_PORT}"
                }
            }
        }
    }
    post{
        always{
            echo 'Dev pipeline execution completed'
        }
    }
}